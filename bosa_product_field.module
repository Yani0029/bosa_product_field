<?php
/*
 * bosa_product_field.module file
 * Include a date field and stock filed for bosa product.
 * @author Yani Xu <yx@bellcom.dk>
 */

module_load_all();

function bosa_product_field_field_info() {
  return array(
    'bosa_product_field' => array(
      'label' => t('Bosa product date and stock'),
      'description' => t('Product date and stock.'),
      'default_widget' => 'bosa_product_field_widget',
      'default_formatter' => 'bosa_product_field_formatter',
    ),
  );
}

function bosa_product_field_field_schema() {
  $columns = array(
    'product_date' => array(
      'description' => 'Product date.',
      'type' => 'datetime',
      'mysql_type' => 'DATETIME',
      'not null' => FALSE,
      'default' => NULL,
    ),
    'product_stock' => array(
      'description' => 'Product stock.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'length' => 10,
    ),
    'product_min_attendee' => array(
      'description' => 'Product min attendee.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 0,
      'length' => 10,
    ),
    'product_status' => array(
      'description' => 'Product status.',
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'default' => 1,
      'length' => 4,
    ),
  );

  return array(
    'columns' => $columns,
    'indexes' => array(),
  );
}

function bosa_product_field_field_widget_info() {
  $widgets = array();

  $widgets['bosa_product_field_widget'] = array(
    'label' => t('Bosa Product field'),
    'field types' => array('bosa_product_field',
      '#type' => 'custom_field_type',
    ),
  );

  return $widgets;
}

function bosa_product_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $settings = $instance['widget']['settings'];
  if ($instance['widget']['type'] == 'bosa_product_field_widget') {
    $users = entity_load('user');
    $users_name = array();
    foreach($users as $user) {
      if ($user->uid)
      $users_name[$user->uid] = $user->name;
    }
    $element += array(
      '#type' => 'fieldset',
    );
    $item =& $items[$delta];
    $element['product_date'] = array(
      '#type' => 'date_popup',
      '#size'  =>20,
      '#title' => t('Date'),
      '#default_value' => isset($item['product_date']) ? $item['product_date'] : '',
      '#date_format' => "d/m/Y H:i",
      '#date_year_range' => '-0:+2',
    );
    $element['product_stock'] = array(
      '#type' => 'textfield',
      '#size'  => 20,
      '#title' => t('Pladser '),
      "#description" => t("'0' means unlimited"),
      '#default_value' => isset($item['product_stock']) ? $item['product_stock'] : 0,
    );
    $element['product_min_attendee'] = array(
      '#type' => 'textfield',
      '#size'  => 20,
      "#description" => t("'0' means unlimited"),
      '#title' => t('Minimum deltagere'),
      '#default_value' => isset($item['product_min_attendee']) ? $item['product_min_attendee'] : 0,
    );
    $element['product_status'] = array(
      '#type' => 'checkbox',
      '#size'  => 5,
      "#description" => t("Deactive - not for sell, Active is default."),
      '#title' => t('Product status'),
      '#default_value' => isset($item['product_status']) ? $item['product_status'] : 1,
    );
  }
  return $element;
}

function bosa_product_field_field_formatter_info() {
  return array(
    'bosa_product_field_formatter' => array(
      'label' => t('Default'),
      'field types' => array('bosa_product_field'),
    ),
  );
}
function bosa_product_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'bosa_product_field_formatter':
      foreach ($items as $delta => $item) {
        $date =  $item['product_date'];
        $date = date('d/m/Y - H:i',strtotime($date));
        $element[$delta]['#markup'] = '
        <div>
        <span><a href="/bosa/voucher/bosa_product/'. $delta . '/' . $entity->product_id .'">' . $date . '</a></span></div>';
      }
      break;
    case 'bosa_product_dato':
      foreach ($items as $delta => $item) {
        $date =  $item['product_date'];
        $date = date('d/m/Y - H:i',strtotime($date));
        $element[$delta]['#markup'] = '
        <div><span> <a href="/bosa/voucher/bosa_product/'. $delta . '/' . $entity->product_id .'">' . $entity->title .'</a> </span><span><a href="/bosa/voucher/bosa_product/'. $delta . '/' . $entity->product_id .'">' . $entity->sku . '</a></span>
        <span><a href="/bosa/voucher/bosa_product/'. $delta . '/' . $entity->product_id .'">' . $date . '</a></span></div>';
      }
      break;
  }
  return $element;
}
function bosa_product_field_field_is_empty($item, $field) {
  return (empty($item['product_date']) && empty($item['product_without_stock']));
}